const withPreact = require("next-plugin-preact");
const withBundleAnalyzer = require("@next/bundle-analyzer")({
    enabled: process.env.ANALYZE === "true",
});
const withWorkbox = require("next-with-workbox");
const withSitemap = require("next-with-sitemap");

const CSS_PATTERN = /\.css$/;
const MODULE_CSS_PATTERN = /\.module\.css$/;

const isCssRules = (rule) => {
    return (
        rule.test &&
        (rule.test.toString() === CSS_PATTERN.toString() || rule.test.toString() === MODULE_CSS_PATTERN.toString())
    );
};

let webpackConfig = withPreact({
    poweredByHeader: false,
    experimental: {
        modern: true,
        css: true,
        polyfillsOptimization: true,
        optimizeFonts: true,
        optimizeImages: true,
    },

    pageExtensions: ["ts", "tsx"],

    i18n: {
        // These are all the locales you want to support in
        // your application
        locales: ["en", "de"],
        // This is the default locale you want to be used when visiting
        // a non-locale prefixed path e.g. `/hello`
        defaultLocale: "en",
        // This is a list of locale domains and the default locale they
        // should handle (these are only required when setting up domain routing)
        domains: [
            {
                domain: "anolilab.com",
                defaultLocale: "en",
            },
            {
                domain: "anolilab.de",
                defaultLocale: "de",
            },
        ],
    },

    webpack(config, options) {
        const { dev } = options;

        const typingLoader = {
            loader: "@teamsupercell/typings-for-css-modules-loader",
            options: {
                banner: "// This file is automatically generated from your CSS. Any edits will be overwritten.",
                disableLocalsExport: true,
                verifyOnly: !dev,
            },
        };
        const pathLoader = {
            loader: "resolve-url-loader",
            options: {
                keepQuery: true,
            },
        };

        config.module.rules.find((rule) => {
            if (Array.isArray(rule.oneOf)) {
                rule.oneOf.forEach((statement) => {
                    if (!isCssRules(statement)) {
                        return;
                    }

                    const index = statement.use.findIndex(({ loader }) => loader.match(/\/css-loader\//));

                    if (index > -1) {
                        statement.use.splice(index, 0, typingLoader);
                        statement.use.splice(index + 1, 0, pathLoader);
                    }
                    // If we didn't find a css-loader we can push the typingLoader onto the use statement
                    else {
                        statement.use.push(typingLoader);
                        statement.use.push(pathLoader);
                    }
                });
            }
        });

        config.resolve.alias["rosetta"] = dev ? 'rosetta/debug' : 'rosetta';

        return config;
    },
});

webpackConfig = withBundleAnalyzer(webpackConfig);
webpackConfig = withWorkbox({ workbox: {}, ...webpackConfig });
webpackConfig = withSitemap({
    sitemap: {
        baseUrl: "https://www.example.com",
        alternateBaseUrls: [
            {
                lang: "de",
                url: "https://example.jp",
            },
            {
                lang: "en",
                url: "https://example.com/es",
            },
        ],
        dest: "public",
        // excludedPaths: ["/login", "/signup"],
        // extraPaths: ["/extra/path"],
        pages: "pages",
        pageTags: [
            {
                path: "/",
                priority: 1.0,
            },
            {
                path: "/extra/path",
                changefreq: "monthly",
            },
            {
                path: "/about",
                changefreq: "weekly",
                priority: 0.5,
            },
        ],
        robots: true,
        sitemap: true,
    },
    ...webpackConfig
});

module.exports = webpackConfig;
